apply plugin : 'eclipse'
apply plugin : 'java'
apply plugin : 'jacoco'
apply plugin : 'maven'

group = 'io.github.vantiv'
version = JAR_VERSION

repositories {
    // mavenCentral()
    // added due to peer authenticated issue getting to mavenCentral
    // remove after testing
    maven { url "http://jcenter.bintray.com/"}
    jcenter()
}

configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
    
    certificationTestCompile.extendsFrom functionalTestCompile
    certificationTestRuntime.extendsFrom functionalTestCompile
    
    generateJAXB.extendsFrom mainRuntime
}

sourceSets {
    main{
        java{
            srcDirs += "$buildDir/generated"
        }
    }
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
    certificationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

dependencies{
    compile group:'com.jcraft', name:'jsch', version:'0.1.54'
    compile group:'commons-io', name:'commons-io', version:'2.5'
    compile group:'org.apache.httpcomponents', name:'httpclient', version:'4.5.2'
    
    testCompile group:'junit', name:'junit', version:'4.12'
    testCompile group:'org.mockito', name:'mockito-all', version:'1.9.5'
    
    generateJAXB group:'com.sun.xml.bind', name:'jaxb-core', version:'2.2.7'
    generateJAXB group:'com.sun.xml.bind', name:'jaxb-impl', version:'2.2.5-5'
    generateJAXB group:'com.sun.xml.bind', name:'jaxb-xjc', version:'2.2.5'
}

////////// PLUGIN CONFIGURATION ////////// 
sourceCompatibility=1.7

clean {
    // temporary, we need to change the tests to generate output inside build folder
    delete 'test'
}

jacocoTestReport {
    executionData = fileTree(dir:"${buildDir}/jacoco/", include:"*.exec")
}

jar{
    manifest {
        attributes("Implementation-Title":"Litle SDK For Java 1.5 and greater", "Implementation-Version":"${JAR_VERSION}","Implementation-Vendor":"Vantiv-eCommerce","Main-Class":"io.github.vantiv.sdk.Setup")
    }
    destinationDir = file("${DIST_DIR_15}/lib")
    archiveName = "litle-sdk-for-java-${JAR_VERSION}.jar"
}

javadoc{
    destinationDir = file("$buildDir/kit/java15/doc")
}

test {
    reports.junitXml.destination = "$buildDir/test-results/unit"
    reports.html.destination = "$buildDir/reports/tests/unit"
}

////////// CUSTOM TASKS ///////////
task processXsd (type: Copy) {
    ext.xsdOutput = file("$buildDir/xsd") 
    
    from ('src/main/xsd') {
        include '*.xsd'
    }
    
    into xsdOutput
    
    doFirst {
        xsdOutput.mkdirs()
    }
    
    doLast {
	    ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(attributeFormDefault=\"unqualified\")>", replace:"\\1 xmlns:jaxb=\"http://java.sun.com/xml/ns/jaxb\" jaxb:version=\"2.0\">", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleCommon_v${SCHEMA_VERSION}.xsd", match:"(elementFormDefault=\"qualified\")>", replace:"\\1 xmlns:jaxb=\"http://java.sun.com/xml/ns/jaxb\" jaxb:version=\"2.0\">", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"transaction\" type=\"xp:transactionType\" abstract=\"true\"/>", replace:"transaction\" type=\"xp:transactionType\" abstract=\"true\"/>    \n\n    <xs:complexType name=\"litleTransactionInterface\" abstract=\"true\"/>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"name=\"transactionType\">", replace:"name=\"transactionType\">    \n        <xs:complexContent>    \n            <xs:extension base=\"xp:litleTransactionInterface\">", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"<xs:attribute name=\"id\" type=\"xp:string25Type\"/>", replace:"       <xs:attribute name=\"id\" type=\"xp:string25Type\"/>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"<xs:attribute name=\"customerId\" type=\"xp:customerIdType\" use=\"optional\"/>", replace:"       <xs:attribute name=\"customerId\" type=\"xp:customerIdType\" use=\"optional\"/>       \n            </xs:extension>       \n        </xs:complexContent>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleRecurring_v${SCHEMA_VERSION}.xsd", match:"name=\"recurringTransactionType\">", replace:"name=\"recurringTransactionType\">    \n        <xs:complexContent>    \n            <xs:extension base=\"xp:litleTransactionInterface\">    \n            </xs:extension>    \n        </xs:complexContent>")
        ant.replaceregexp(file:"$xsdOutput/litleRecurring_v${SCHEMA_VERSION}.xsd", match:"name=\"recurringTransactionResponseType\">", replace:"name=\"recurringTransactionResponseType\">    \n        <xs:complexContent>    \n            <xs:extension base=\"xp:litleTransactionInterface\">", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleRecurring_v${SCHEMA_VERSION}.xsd", match:"<xs:sequence>", replace:"        <xs:sequence>")
        ant.replaceregexp(file:"$xsdOutput/litleRecurring_v${SCHEMA_VERSION}.xsd", match:"<xs:element name=\"litleTxnId\" type=\"xp:litleIdType\" />", replace:"         <xs:element name=\"litleTxnId\" type=\"xp:litleIdType\" />")
        ant.replaceregexp(file:"$xsdOutput/litleRecurring_v${SCHEMA_VERSION}.xsd", match:"<xs:element name=\"response\" type=\"xp:responseType\" />", replace:"         <xs:element name=\"response\" type=\"xp:responseType\" />")
        ant.replaceregexp(file:"$xsdOutput/litleRecurring_v${SCHEMA_VERSION}.xsd", match:"<xs:element name=\"message\" type=\"xs:string\" />", replace:"         <xs:element name=\"message\" type=\"xs:string\" />")
        ant.replaceregexp(file:"$xsdOutput/litleRecurring_v${SCHEMA_VERSION}.xsd", match:"<xs:element name=\"responseTime\" type=\"xs:dateTime\" />", replace:"         <xs:element name=\"responseTime\" type=\"xs:dateTime\" />")
        ant.replaceregexp(file:"$xsdOutput/litleRecurring_v${SCHEMA_VERSION}.xsd", match:"</xs:sequence>", replace:"        </xs:sequence>    \n            </xs:extension>    \n        </xs:complexContent>")
        ant.replaceregexp(file:"$xsdOutput/litleRecurring_v${SCHEMA_VERSION}.xsd", match:"", replace:"")
        ant.replaceregexp(file:"$xsdOutput/litleRecurring_v${SCHEMA_VERSION}.xsd", match:"", replace:"")
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"enumeration value=(.*?3dsAuthenticated.*?)/>", replace:"enumeration value=\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"AUTHENTICATED_3DS\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"enumeration value=(.*?3dsAttempted.*?)/>", replace:"enumeration value=\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"ATTEMPTED_3DS\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(element name=\"customerType\" minOccurs=\"0\".*?<xs:simpleType>)", replace:"\\1<xs:annotation><xs:appinfo><jaxb:typesafeEnumClass name=\"CustomerType\"/></xs:appinfo></xs:annotation>", flags:"s")
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(element name=\"residenceStatus\" minOccurs=\"0\".*?<xs:simpleType>)", replace:"\\1<xs:annotation><xs:appinfo><jaxb:typesafeEnumClass name=\"ResidenceStatus\"/></xs:appinfo></xs:annotation>", flags:"s")
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(element name=\"deliveryType\" minOccurs=\"0\".*?default=\"TBD\".*?<xs:simpleType>)", replace:"\\1<xs:annotation><xs:appinfo><jaxb:typesafeEnumClass name=\"DeliveryType\"/></xs:appinfo></xs:annotation>", flags:"s")
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"00\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"UNKNOWN\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"01\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"FEDERAL_NATIONAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"02\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"STATE_SALEX_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"03\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"CITY_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"04\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"LOCAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"05\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"MUNICIPAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"06\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"OTHER_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"10\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"VALUE_ADDED_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"11\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"GOODS_AND_SERVICES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"12\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"PROVINCIAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"13\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"HARMONIZED_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"14\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"QUEBEC_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"20\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"ROOM_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"21\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"OCCUPANCY_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"22\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"ENERGY_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleCommon_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"BLANK\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:element name=\"echeckVerification.*?)<xs:all>(.*?)</xs:all>(.*?</xs:element)", replace:"\\1<xs:sequence>\\2</xs:sequence>\\3", flags:"s")
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"<xs:element ref=\"xp:echeckOrEcheckToken\"\\s?/>", replace:"<xs:choice><xs:element name=\"echeck\" type=\"xp:echeckType\"/><xs:element name=\"echeckToken\" type=\"xp:echeckTokenType\"/></xs:choice>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleTransaction_v${SCHEMA_VERSION}.xsd", match:"<xs:element ref=\"xp:echeckOrEcheckToken\" minOccurs=\"0\"\\s?/>", replace:"<xs:choice><xs:element name=\"echeck\" type=\"xp:echeckType\"/><xs:element name=\"echeckToken\" type=\"xp:echeckTokenType\"/></xs:choice>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleBatch_v${SCHEMA_VERSION}.xsd", match:"(<xs:attribute name=\"num\\w+\".*use=\"optional\".*)/>", replace:"\\1 default=\"0\"/>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/litleBatch_v${SCHEMA_VERSION}.xsd", match:"(<xs:attribute name=\"\\w+Amount\".*use=\"optional\".*)/>", replace:"\\1 default=\"0\"/>", byline:true)
    }
}

task generateJaxbClasses(dependsOn: processXsd) {
    compileJava.dependsOn it
    eclipseClasspath.dependsOn it
    
    ext.bindingsFile = "src/main/xsd/bindings.xml"
    ext.generatedDir = "${buildDir}/generated"
    
    inputs.dir processXsd.xsdOutput
    inputs.file bindingsFile
    outputs.dir generatedDir
    
    doFirst {
        mkdir generatedDir
    }
     
    doLast {
        ant.taskdef(name: "xjc", classname:"com.sun.tools.xjc.XJCTask", classpath:configurations.generateJAXB.asPath)
        ant.xjc(destdir:"${generatedDir}", package: "io.github.vantiv.sdk.generate", binding:bindingsFile, extension:'true'){
            schema(dir:"${processXsd.xsdOutput}", includes:"litleOnline_v${SCHEMA_VERSION}.xsd,litleBatch_v${SCHEMA_VERSION}.xsd")
        }
    }
}

task testFunctional(type:Test, dependsOn: functionalTestClasses){
    check.dependsOn it
    classpath = project.sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test
    testClassesDir = file(project.sourceSets.functionalTest.output.classesDir)
    reports.junitXml.destination = "$buildDir/test-results/functional"
    reports.html.destination = "$buildDir/reports/tests/functional"
}

task testCertification(type:Test, dependsOn: certificationTestClasses){
    check.dependsOn it
    classpath = project.sourceSets.certificationTest.runtimeClasspath
    mustRunAfter testFunctional
    testClassesDir = file(project.sourceSets.certificationTest.output.classesDir)
    reports.junitXml.destination = "$buildDir/test-results/certification"
    reports.html.destination = "$buildDir/reports/tests/certification"
}

task copyJarToKit(type:Copy, dependsOn:[check,jar]){
    from "${DIST_DIR_15}/lib/litle-sdk-for-java-${JAR_VERSION}.jar"
    from "LICENSE"
    into KIT_DIR
}

task copyLibsToKit(type:Copy, dependsOn:check){
    from configurations.compile.asFileTree.matching{
        include '**/activation*'
        include '**/jaxb-api*'
        include '**/jaxb-impl*'
        include '**/jsr173*'
        include '**/commons-logging-1.1.1*'
        include '**/commons-codec*'
        include '**/fluent-hc*'
        include '**/httpclient*'
        include '**/httpcore*'
        include '**/httpmime*'
        include '**/jsch*'
    }

    into KIT_DEPENDENCIES_DIR
}

task tarKit(type:Tar, dependsOn:[copyJarToKit, copyLibsToKit]){
    compression = Compression.GZIP
    destinationDir = file("$buildDir/kit")
    archiveName = "litle-sdk-for-java-${JAR_VERSION}.tar.gz"
    from "$buildDir/kit/java15"
}

task zipKit(type:Zip, dependsOn:[copyJarToKit, copyLibsToKit]){
    destinationDir = file("$buildDir/kit")
    archiveName = "litle-sdk-for-java-${JAR_VERSION}.zip"
    from "$buildDir/kit/java15"
}

task writeNewPom(type:Copy) {
    build.dependsOn it
    pom {
        project {
            modelVersion '4.0.0'
            groupId 'io.github.vantiv'
            artifactId 'litle-sdk-for-java'
            version "${JAR_VERSION}"
        }
    }.writeTo("$buildDir/kit/pom.xml")
}

task sourceJar(type:Jar) {
    build.dependsOn it
    dependsOn generateJaxbClasses
    destinationDir = file("${buildDir}/kit")
    classifier = 'sources'
    from "src/main/java"
    from generateJaxbClasses.generatedDir
}

task kit(dependsOn:[tarKit, zipKit, writeNewPom, sourceJar]){
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }
    build.dependsOn it
    dependsOn javadoc
}
